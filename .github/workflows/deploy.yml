name: Spring Boot & Gradle CI/CD

# Event Trigger
on:
  push:
    branches: [ "master" ]

jobs:
  build:
    # 실행 환경 지정
    runs-on: ubuntu-latest

    # Task의 sequence를 명시한다.
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        
      - name: Set Yaml
        uses: microsoft/variable-substitution@v1
        with:
          files: ${{ env.RESOURCE_PATH }} 
        env:
          spring.security.oauth2.client.registration.kakao.client-id: ${{ secrets.CLIENT_ID }} 
          spring.security.oauth2.client.registration.kakao.client-secret: ${{ secrets.CLIENT_SECRET }}  
          spring.datasource.url: ${{ secrets.DATASOURCCE_URL }} 
          spring.datasource.username: ${{ secrets.DATASOURCE_USERNAME }} 
          spring.datasource.password: ${{ secrets.DATASOURCE_PASSWORD }} 
          app.auth.accessTokenSecret: ${{ secrets.ACCESS_TOKEN_SECRET }} 
          app.auth.refreshTokenSecret: ${{ secrets.REFRESH_TOKEN_SECRET }}

      # Build
      - name: Build with Gradle
        run: ./gradlew clean build --stacktrace

      # 전송할 파일을 담을 디렉토리 생성
      - name: Make Directory for deliver
        run: mkdir deploy

      # Jar 파일 Copy
      - name: Copy Jar
        run: cp ./build/libs/*.jar ./deploy/

      # appspec.yml Copy
      - name: Copy appspec
        run: cp appspec.yml ./deploy/

      # script file Copy
      - name: Copy shell
        run: cp ./scripts/* ./deploy/

      # 압축파일 형태로 전달
      - name: Make zip file
        run: zip -r -qq -j ./spring-build.zip ./deploy

      # S3 Bucket으로 copy
      - name: Deliver to AWS S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws s3 cp \
          --region ap-northeast-2 \
          --acl private ./spring-build.zip s3://missulgandeploy

      # Deploy
      - name: Deploy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws deploy create-deployment \
          --application-name spring-deploy \
          --deployment-group-name deploy \
          --file-exists-behavior OVERWRITE \
          --s3-location bucket=missulgandeploy,bundleType=zip,key=spring-build.zip \
          --region ap-northeast-2
